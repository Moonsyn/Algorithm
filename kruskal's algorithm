import quickSort

def getParent(set, n):
    if set[n] == n:
        return n 
    set[n] = getParent(set, set[n])
    return set[n]

def unionParent(set, n, m):
    n = getParent(set, n)
    m = getParent(set, m)
    if n < m:
        set[m] = n
    else:
        set[n] = m
        
def find(set, n, m):
    n = getParent(set, n)
    m = getParent(set, m)
    if n == m:
        return 1
    else:
        return 0
    
class Edge:
    def __init__(self, n, m, distance):
        self.node=[]
        self.node.append(n)
        self.node.append(m)
        self.distance = distance
    def operator(self, Edge):
        return self.distance < Edge.distance

graph = [Edge(1, 7, 12), Edge(1, 4, 28), Edge(1, 2, 67), Edge(1, 5, 17), Edge(2, 4, 24), 
        Edge(2, 5, 62), Edge(3, 5, 20), Edge(3, 6, 37), Edge(4, 7, 13), Edge(5, 6, 45),
        Edge(5, 7, 73)]
set = []
sum = 0
quickSort.quickSort(graph,0,10)
for j in range(0,11):
    set.append(j)
    
for k in range(0,11):
    if find(set, graph[k].node[0] - 1, graph[k].node[1] -1) == 0:
        sum = sum + graph[k].distance
        unionParent(set, graph[k].node[0]-1, graph[k].node[1]-1)
print(sum)
